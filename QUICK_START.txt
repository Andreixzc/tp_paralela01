===============================================================================
 QUICK START - TESTE LOCAL NO UBUNTU
===============================================================================

Seu hardware: Intel i5 + RTX 3050 + Ubuntu
Status: Servidor PARCODE indispon√≠vel - testando LOCALMENTE

===============================================================================
IN√çCIO R√ÅPIDO (5 MINUTOS)
===============================================================================

1. ABRIR TERMINAL e navegar para a pasta do projeto:
   
   cd ~/projects/tp_paralela
   # OU onde voc√™ colocou os arquivos

2. VERIFICAR se est√° tudo certo:
   
   ./verify_setup.sh

3. SE DER ERRO DE DEPEND√äNCIAS, instalar:
   
   sudo apt update
   sudo apt install build-essential openmpi-bin libopenmpi-dev wget

4. BAIXAR o dataset MNIST:
   
   ./download_mnist.sh
   # Deve criar o arquivo mnist_train.csv (~109MB)

5. COMPILAR tudo:
   
   make all
   # Deve criar: kmeans_seq, kmeans_omp, kmeans_hybrid

6. TESTE R√ÅPIDO (30 segundos):
   
   ./kmeans_seq mnist_train.csv 3 5

   Se funcionar, voc√™ ver√°:
   Loading data...
   Loaded 60000 points...
   K-Means finished in X iterations.
   Elapsed time: X.XXX seconds

7. EXECUTAR TODOS OS TESTES (5-10 minutos):
   
   ./run_tests_local.sh
   
   # Vai testar todas as configura√ß√µes e salvar resultados

8. ANALISAR RESULTADOS:
   
   cat resultados_local_*.txt
   
   # Procure por "Elapsed time" em cada teste

===============================================================================
 ARQUIVOS INCLU√çDOS
===============================================================================

C√≥digos Fonte:
  ‚úì kmeans_sequential.cpp  - Vers√£o sequencial (baseline)
  ‚úì kmeans_omp.cpp          - Vers√£o OpenMP  
  ‚úì kmeans_hybrid.cpp       - Vers√£o MPI+OpenMP

Documenta√ß√£o:
  ‚úì README.txt              - Documenta√ß√£o completa
  ‚úì GUIA_TESTE_LOCAL.txt    - Guia detalhado de teste local (LEIA!)
  ‚úì Makefile                - Compila√ß√£o autom√°tica

Scripts:
  ‚úì verify_setup.sh         - Verificar ambiente
  ‚úì download_mnist.sh       - Baixar dataset MNIST
  ‚úì run_tests_local.sh      - Executar todos os testes (LOCAL)
  ‚úì run_tests.sh            - Executar testes (para PARCODE)

===============================================================================
 COMANDOS IMPORTANTES
===============================================================================

COMPILA√á√ÉO:
  make all      # Compilar tudo
  make seq      # Apenas sequencial
  make omp      # Apenas OpenMP
  make hybrid   # Apenas h√≠brido
  make clean    # Limpar execut√°veis

EXECU√á√ÉO MANUAL:
  # Sequencial
  ./kmeans_seq mnist_train.csv 10 20

  # OpenMP com 4 threads
  export OMP_NUM_THREADS=4
  ./kmeans_omp mnist_train.csv 10 20

  # H√≠brido: 2 processos √ó 2 threads
  export OMP_NUM_THREADS=2
  mpirun -np 2 ./kmeans_hybrid mnist_train.csv 10 20

PAR√ÇMETROS:
  - mnist_train.csv: arquivo de dados
  - 10: n√∫mero de clusters (K)
  - 20: m√°ximo de itera√ß√µes

===============================================================================
SEU HARDWARE
===============================================================================

Para ver informa√ß√µes da sua CPU:

lscpu | grep -E "Model|CPU\(s\)|Core|Thread"

Seu i5 provavelmente tem:
- 6 cores f√≠sicos
- 12 threads l√≥gicos (com hyperthreading)
- RTX 3050 (n√£o usado neste projeto)

Voc√™ pode testar com: 1, 2, 4, 6, 8, 12 threads

===============================================================================
üìä AP√ìS OS TESTES
===============================================================================

1. ABRA o arquivo de resultados:
   
   gedit resultados_local_*.txt
   # ou: cat resultados_local_*.txt

2. ANOTE os tempos de cada configura√ß√£o

3. CALCULE os speedups:
   
   Speedup = Tempo_Sequencial / Tempo_Paralelo
   
   Exemplo:
   - Sequencial: 15.5s
   - OpenMP 4 threads: 4.2s
   - Speedup: 15.5 / 4.2 = 3.69x

4. ATUALIZE os arquivos .cpp:
   
   Abra kmeans_omp.cpp e kmeans_hybrid.cpp
   Procure por "[A PREENCHER]"
   Substitua pelos seus tempos medidos
   
   IMPORTANTE: Mencione que foi testado em M√ÅQUINA LOCAL!

5. OPCIONAL: Criar gr√°ficos no Excel/LibreOffice

===============================================================================
 IMPORTANTE
===============================================================================

SOBRE O SERVIDOR PARCODE:
‚úó Servidor PARCODE n√£o est√° dispon√≠vel
‚úì Voc√™ pode fazer tudo localmente no seu Ubuntu
‚úì Documente que os testes foram feitos em M√ÅQUINA LOCAL
‚úì Especifique seu hardware (Intel i5, quantos cores, etc.)

PARA O TRABALHO FINAL:
- Use seus tempos locais
- Explique no relat√≥rio que PARCODE n√£o estava dispon√≠vel
- Documente seu hardware nos coment√°rios dos .cpp
- Mantenha todos os coment√°rios explicando as mudan√ßas

SE PARCODE VOLTAR:
- Execute os mesmos testes l√°
- Use os tempos do PARCODE na vers√£o final
- Compare com seus resultados locais (opcional)

===============================================================================
 PROBLEMAS COMUNS
===============================================================================

PROBLEMA: "mpirun: command not found"
SOLU√á√ÉO: sudo apt install openmpi-bin libopenmpi-dev

PROBLEMA: "Cannot open file: mnist_train.csv"  
SOLU√á√ÉO: ./download_mnist.sh

PROBLEMA: "Permission denied" ao executar scripts
SOLU√á√ÉO: chmod +x *.sh

PROBLEMA: Testes muito r√°pidos (< 5 segundos)
SOLU√á√ÉO: Edite run_tests_local.sh e mude MAX_ITER de 20 para 40

PROBLEMA: "g++: error: unrecognized command line option '-fopenmp'"
SOLU√á√ÉO: sudo apt install g++-11

===============================================================================
LEIA TAMB√âM
===============================================================================

Para informa√ß√µes DETALHADAS:
‚Üí GUIA_TESTE_LOCAL.txt  (Guia completo de teste local)
‚Üí README.txt            (Documenta√ß√£o geral do projeto)

===============================================================================
CHECKLIST
===============================================================================

Antes de executar os testes:
‚ñ° Depend√™ncias instaladas (g++, mpicc, make)
‚ñ° Dataset baixado (mnist_train.csv existe)
‚ñ° Programas compilados (make all executado)
‚ñ° verify_setup.sh passou sem erros

Ap√≥s executar os testes:
‚ñ° Resultados salvos em resultados_local_*.txt
‚ñ° Speedups calculados
‚ñ° Tempos atualizados nos .cpp
‚ñ° Hardware documentado nos coment√°rios

Para entrega final:
‚ñ° kmeans_sequential.cpp
‚ñ° kmeans_omp.cpp  
‚ñ° kmeans_hybrid.cpp
‚ñ° README.txt
‚ñ° (Opcional) Gr√°ficos de desempenho
